// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/02/2023 23:22:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    jpd_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module jpd_control_vlg_sample_tst(
	c,
	ck,
	N,
	rst,
	Z,
	sampler_tx
);
input [15:0] c;
input  ck;
input  N;
input  rst;
input  Z;
output sampler_tx;

reg sample;
time current_time;
always @(c or ck or N or rst or Z)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module jpd_control_vlg_check_tst (
	cg_AC,
	cg_PC,
	cg_RDM,
	cg_REM,
	cg_RI,
	inc_PC,
	MxREM,
	q,
	T,
	sampler_rx
);
input  cg_AC;
input  cg_PC;
input  cg_RDM;
input  cg_REM;
input  cg_RI;
input  inc_PC;
input  MxREM;
input [2:0] q;
input [7:0] T;
input sampler_rx;

reg  cg_AC_expected;
reg  cg_PC_expected;
reg  cg_RDM_expected;
reg  cg_REM_expected;
reg  cg_RI_expected;
reg  inc_PC_expected;
reg  MxREM_expected;
reg [2:0] q_expected;
reg [7:0] T_expected;

reg  cg_AC_prev;
reg  cg_PC_prev;
reg  cg_RDM_prev;
reg  cg_REM_prev;
reg  cg_RI_prev;
reg  inc_PC_prev;
reg  MxREM_prev;
reg [2:0] q_prev;
reg [7:0] T_prev;

reg  cg_AC_expected_prev;
reg  cg_PC_expected_prev;
reg  cg_RDM_expected_prev;
reg  cg_REM_expected_prev;
reg  cg_RI_expected_prev;
reg  inc_PC_expected_prev;
reg  MxREM_expected_prev;
reg [2:0] q_expected_prev;
reg [7:0] T_expected_prev;

reg  last_cg_AC_exp;
reg  last_cg_PC_exp;
reg  last_cg_RDM_exp;
reg  last_cg_REM_exp;
reg  last_cg_RI_exp;
reg  last_inc_PC_exp;
reg  last_MxREM_exp;
reg [2:0] last_q_exp;
reg [7:0] last_T_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	cg_AC_prev = cg_AC;
	cg_PC_prev = cg_PC;
	cg_RDM_prev = cg_RDM;
	cg_REM_prev = cg_REM;
	cg_RI_prev = cg_RI;
	inc_PC_prev = inc_PC;
	MxREM_prev = MxREM;
	q_prev = q;
	T_prev = T;
end

// update expected /o prevs

always @(trigger)
begin
	cg_AC_expected_prev = cg_AC_expected;
	cg_PC_expected_prev = cg_PC_expected;
	cg_RDM_expected_prev = cg_RDM_expected;
	cg_REM_expected_prev = cg_REM_expected;
	cg_RI_expected_prev = cg_RI_expected;
	inc_PC_expected_prev = inc_PC_expected;
	MxREM_expected_prev = MxREM_expected;
	q_expected_prev = q_expected;
	T_expected_prev = T_expected;
end



// expected cg_AC
initial
begin
	cg_AC_expected = 1'bX;
end 

// expected cg_PC
initial
begin
	cg_PC_expected = 1'bX;
end 

// expected cg_RDM
initial
begin
	cg_RDM_expected = 1'bX;
end 

// expected cg_REM
initial
begin
	cg_REM_expected = 1'bX;
end 

// expected cg_RI
initial
begin
	cg_RI_expected = 1'bX;
end 

// expected inc_PC
initial
begin
	inc_PC_expected = 1'bX;
end 

// expected MxREM
initial
begin
	MxREM_expected = 1'bX;
end 
// expected q[ 2 ]
initial
begin
	q_expected[2] = 1'bX;
end 
// expected q[ 1 ]
initial
begin
	q_expected[1] = 1'bX;
end 
// expected q[ 0 ]
initial
begin
	q_expected[0] = 1'bX;
end 
// expected T[ 7 ]
initial
begin
	T_expected[7] = 1'bX;
end 
// expected T[ 6 ]
initial
begin
	T_expected[6] = 1'bX;
end 
// expected T[ 5 ]
initial
begin
	T_expected[5] = 1'bX;
end 
// expected T[ 4 ]
initial
begin
	T_expected[4] = 1'bX;
end 
// expected T[ 3 ]
initial
begin
	T_expected[3] = 1'bX;
end 
// expected T[ 2 ]
initial
begin
	T_expected[2] = 1'bX;
end 
// expected T[ 1 ]
initial
begin
	T_expected[1] = 1'bX;
end 
// expected T[ 0 ]
initial
begin
	T_expected[0] = 1'bX;
end 
// generate trigger
always @(cg_AC_expected or cg_AC or cg_PC_expected or cg_PC or cg_RDM_expected or cg_RDM or cg_REM_expected or cg_REM or cg_RI_expected or cg_RI or inc_PC_expected or inc_PC or MxREM_expected or MxREM or q_expected or q or T_expected or T)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cg_AC = %b | expected cg_PC = %b | expected cg_RDM = %b | expected cg_REM = %b | expected cg_RI = %b | expected inc_PC = %b | expected MxREM = %b | expected q = %b | expected T = %b | ",cg_AC_expected_prev,cg_PC_expected_prev,cg_RDM_expected_prev,cg_REM_expected_prev,cg_RI_expected_prev,inc_PC_expected_prev,MxREM_expected_prev,q_expected_prev,T_expected_prev);
	$display("| real cg_AC = %b | real cg_PC = %b | real cg_RDM = %b | real cg_REM = %b | real cg_RI = %b | real inc_PC = %b | real MxREM = %b | real q = %b | real T = %b | ",cg_AC_prev,cg_PC_prev,cg_RDM_prev,cg_REM_prev,cg_RI_prev,inc_PC_prev,MxREM_prev,q_prev,T_prev);
`endif
	if (
		( cg_AC_expected_prev !== 1'bx ) && ( cg_AC_prev !== cg_AC_expected_prev )
		&& ((cg_AC_expected_prev !== last_cg_AC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_AC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_AC_expected_prev);
		$display ("     Real value = %b", cg_AC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cg_AC_exp = cg_AC_expected_prev;
	end
	if (
		( cg_PC_expected_prev !== 1'bx ) && ( cg_PC_prev !== cg_PC_expected_prev )
		&& ((cg_PC_expected_prev !== last_cg_PC_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_PC_expected_prev);
		$display ("     Real value = %b", cg_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_cg_PC_exp = cg_PC_expected_prev;
	end
	if (
		( cg_RDM_expected_prev !== 1'bx ) && ( cg_RDM_prev !== cg_RDM_expected_prev )
		&& ((cg_RDM_expected_prev !== last_cg_RDM_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_RDM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_RDM_expected_prev);
		$display ("     Real value = %b", cg_RDM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_cg_RDM_exp = cg_RDM_expected_prev;
	end
	if (
		( cg_REM_expected_prev !== 1'bx ) && ( cg_REM_prev !== cg_REM_expected_prev )
		&& ((cg_REM_expected_prev !== last_cg_REM_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_REM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_REM_expected_prev);
		$display ("     Real value = %b", cg_REM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_cg_REM_exp = cg_REM_expected_prev;
	end
	if (
		( cg_RI_expected_prev !== 1'bx ) && ( cg_RI_prev !== cg_RI_expected_prev )
		&& ((cg_RI_expected_prev !== last_cg_RI_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cg_RI :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cg_RI_expected_prev);
		$display ("     Real value = %b", cg_RI_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_cg_RI_exp = cg_RI_expected_prev;
	end
	if (
		( inc_PC_expected_prev !== 1'bx ) && ( inc_PC_prev !== inc_PC_expected_prev )
		&& ((inc_PC_expected_prev !== last_inc_PC_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inc_PC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inc_PC_expected_prev);
		$display ("     Real value = %b", inc_PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inc_PC_exp = inc_PC_expected_prev;
	end
	if (
		( MxREM_expected_prev !== 1'bx ) && ( MxREM_prev !== MxREM_expected_prev )
		&& ((MxREM_expected_prev !== last_MxREM_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MxREM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MxREM_expected_prev);
		$display ("     Real value = %b", MxREM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MxREM_exp = MxREM_expected_prev;
	end
	if (
		( q_expected_prev[0] !== 1'bx ) && ( q_prev[0] !== q_expected_prev[0] )
		&& ((q_expected_prev[0] !== last_q_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_q_exp[0] = q_expected_prev[0];
	end
	if (
		( q_expected_prev[1] !== 1'bx ) && ( q_prev[1] !== q_expected_prev[1] )
		&& ((q_expected_prev[1] !== last_q_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_q_exp[1] = q_expected_prev[1];
	end
	if (
		( q_expected_prev[2] !== 1'bx ) && ( q_prev[2] !== q_expected_prev[2] )
		&& ((q_expected_prev[2] !== last_q_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", q_expected_prev);
		$display ("     Real value = %b", q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_q_exp[2] = q_expected_prev[2];
	end
	if (
		( T_expected_prev[0] !== 1'bx ) && ( T_prev[0] !== T_expected_prev[0] )
		&& ((T_expected_prev[0] !== last_T_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T_exp[0] = T_expected_prev[0];
	end
	if (
		( T_expected_prev[1] !== 1'bx ) && ( T_prev[1] !== T_expected_prev[1] )
		&& ((T_expected_prev[1] !== last_T_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T_exp[1] = T_expected_prev[1];
	end
	if (
		( T_expected_prev[2] !== 1'bx ) && ( T_prev[2] !== T_expected_prev[2] )
		&& ((T_expected_prev[2] !== last_T_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T_exp[2] = T_expected_prev[2];
	end
	if (
		( T_expected_prev[3] !== 1'bx ) && ( T_prev[3] !== T_expected_prev[3] )
		&& ((T_expected_prev[3] !== last_T_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T_exp[3] = T_expected_prev[3];
	end
	if (
		( T_expected_prev[4] !== 1'bx ) && ( T_prev[4] !== T_expected_prev[4] )
		&& ((T_expected_prev[4] !== last_T_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T_exp[4] = T_expected_prev[4];
	end
	if (
		( T_expected_prev[5] !== 1'bx ) && ( T_prev[5] !== T_expected_prev[5] )
		&& ((T_expected_prev[5] !== last_T_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T_exp[5] = T_expected_prev[5];
	end
	if (
		( T_expected_prev[6] !== 1'bx ) && ( T_prev[6] !== T_expected_prev[6] )
		&& ((T_expected_prev[6] !== last_T_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T_exp[6] = T_expected_prev[6];
	end
	if (
		( T_expected_prev[7] !== 1'bx ) && ( T_prev[7] !== T_expected_prev[7] )
		&& ((T_expected_prev[7] !== last_T_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_T_exp[7] = T_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module jpd_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] c;
reg ck;
reg N;
reg rst;
reg Z;
// wires                                               
wire cg_AC;
wire cg_PC;
wire cg_RDM;
wire cg_REM;
wire cg_RI;
wire inc_PC;
wire MxREM;
wire [2:0] q;
wire [7:0] T;

wire sampler;                             

// assign statements (if any)                          
jpd_control i1 (
// port map - connection between master ports and signals/registers   
	.c(c),
	.cg_AC(cg_AC),
	.cg_PC(cg_PC),
	.cg_RDM(cg_RDM),
	.cg_REM(cg_REM),
	.cg_RI(cg_RI),
	.ck(ck),
	.inc_PC(inc_PC),
	.MxREM(MxREM),
	.N(N),
	.q(q),
	.rst(rst),
	.T(T),
	.Z(Z)
);
// c[ 15 ]
initial
begin
	c[15] = 1'b0;
end 
// c[ 14 ]
initial
begin
	c[14] = 1'b0;
end 
// c[ 13 ]
initial
begin
	c[13] = 1'b0;
end 
// c[ 12 ]
initial
begin
	c[12] = 1'b0;
end 
// c[ 11 ]
initial
begin
	c[11] = 1'b0;
end 
// c[ 10 ]
initial
begin
	c[10] = 1'b0;
end 
// c[ 9 ]
initial
begin
	c[9] = 1'b0;
end 
// c[ 8 ]
initial
begin
	c[8] = 1'b0;
end 
// c[ 7 ]
initial
begin
	c[7] = 1'b0;
end 
// c[ 6 ]
initial
begin
	c[6] = 1'b0;
end 
// c[ 5 ]
initial
begin
	c[5] = 1'b0;
end 
// c[ 4 ]
initial
begin
	c[4] = 1'b0;
end 
// c[ 3 ]
initial
begin
	c[3] = 1'b0;
end 
// c[ 2 ]
initial
begin
	c[2] = 1'b0;
end 
// c[ 1 ]
initial
begin
	c[1] = 1'b0;
end 
// c[ 0 ]
initial
begin
	c[0] = 1'b0;
end 

// ck
initial
begin
	repeat(66)
	begin
		ck = 1'b0;
		ck = #7500 1'b1;
		# 7500;
	end
	ck = 1'b0;
	ck = #7500 1'b1;
end 

// N
initial
begin
	N = 1'b0;
end 

// rst
initial
begin
	rst = 1'b1;
	rst = #20000 1'b0;
end 

// Z
initial
begin
	Z = 1'b0;
end 

jpd_control_vlg_sample_tst tb_sample (
	.c(c),
	.ck(ck),
	.N(N),
	.rst(rst),
	.Z(Z),
	.sampler_tx(sampler)
);

jpd_control_vlg_check_tst tb_out(
	.cg_AC(cg_AC),
	.cg_PC(cg_PC),
	.cg_RDM(cg_RDM),
	.cg_REM(cg_REM),
	.cg_RI(cg_RI),
	.inc_PC(inc_PC),
	.MxREM(MxREM),
	.q(q),
	.T(T),
	.sampler_rx(sampler)
);
endmodule

